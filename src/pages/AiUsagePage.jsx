import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';

const parchmentTexture = "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='240' height='240' viewBox='0 0 240 240'%3E%3Crect width='240' height='240' fill='%23221610'/%3E%3Cg fill='%23f1d4a4' fill-opacity='0.05'%3E%3Cpath d='M0 0h2v2H0zm120 38h2v1h-2zM70 90h1v2h-1zM205 72h2v1h-2zM42 160h2v2h-2zM182 148h1v2h-1zM95 210h2v1H95zM150 186h2v1h-2z'/%3E%3C/g%3E%3C/svg%3E\")";
const fiberTexture = "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='120' height='120' viewBox='0 0 120 120'%3E%3Cg fill='%23d6b485' fill-opacity='0.08'%3E%3Crect width='120' height='1' y='28'/%3E%3Crect width='120' height='1' y='76'/%3E%3Crect width='1' height='120' x='34'/%3E%3Crect width='1' height='120' x='86'/%3E%3C/g%3E%3C/svg%3E\")";

const AiUsagePage = () => {
  const navigate = useNavigate();

  const principles = [
    {
      icon: "ü§ù",
      title: "AI h·ªó tr·ª£ h·ªçc t·∫≠p, kh√¥ng thay th·∫ø t∆∞ duy",
      description: "S·ª≠ d·ª•ng AI nh∆∞ m·ªôt c√¥ng c·ª• h·ªó tr·ª£ ƒë·ªÉ t√¨m hi·ªÉu, ph√¢n t√≠ch th√¥ng tin, nh∆∞ng vi·ªác suy nghƒ© ph·∫£n bi·ªán v√† ƒë∆∞a ra k·∫øt lu·∫≠n ph·∫£i do b·∫£n th√¢n th·ª±c hi·ªán.",
      examples: [
        "D√πng AI ƒë·ªÉ t√≥m t·∫Øt t√†i li·ªáu d√†i",
        "Y√™u c·∫ßu AI gi·∫£i th√≠ch kh√°i ni·ªám ph·ª©c t·∫°p",
        "Nh·ªù AI g·ª£i √Ω √Ω t∆∞·ªüng cho b√†i vi·∫øt",
        "T·ª± m√¨nh ph√¢n t√≠ch v√† ƒë√°nh gi√° th√¥ng tin"
      ]
    },
    {
      icon: "üìù",
      title: "Ph·∫£i tr√≠ch d·∫´n khi d√πng n·ªôi dung AI",
      description: "Khi s·ª≠ d·ª•ng √Ω t∆∞·ªüng, th√¥ng tin ho·∫∑c ƒëo·∫°n vƒÉn ƒë∆∞·ª£c t·∫°o b·ªüi AI trong b√†i l√†m c·ªßa m√¨nh, c·∫ßn ph·∫£i ghi r√µ ngu·ªìn v√† c√°ch th·ª©c s·ª≠ d·ª•ng.",
      examples: [
        "Ghi ch√∫: 'ƒê∆∞·ª£c h·ªó tr·ª£ b·ªüi ChatGPT/Claude/Gemini'",
        "Ch·ªâ r√µ ph·∫ßn n√†o ƒë∆∞·ª£c AI t·∫°o ra",
        "Gi·∫£i th√≠ch c√°ch ƒë√£ x·ª≠ l√Ω th√¥ng tin t·ª´ AI",
        "Kh√¥ng sao ch√©p nguy√™n vƒÉn m√† kh√¥ng ghi ngu·ªìn"
      ]
    },
    {
      icon: "üß†",
      title: "AI ch·ªâ l√† c√¥ng c·ª•, con ng∆∞·ªùi m·ªõi l√† trung t√¢m",
      description: "Tr√≠ tu·ªá nh√¢n t·∫°o l√† ph∆∞∆°ng ti·ªán h·ªó tr·ª£, nh∆∞ng kh·∫£ nƒÉng t∆∞ duy ph·∫£n bi·ªán, s√°ng t·∫°o v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh cu·ªëi c√πng thu·ªôc v·ªÅ con ng∆∞·ªùi.",
      examples: [
        "Ki·ªÉm tra ƒë·ªô ch√≠nh x√°c c·ªßa th√¥ng tin AI cung c·∫•p",
        "ƒê·ªëi chi·∫øu v·ªõi nhi·ªÅu ngu·ªìn kh√°c nhau",
        "S·ª≠ d·ª•ng ki·∫øn th·ª©c c√° nh√¢n ƒë·ªÉ ƒë√°nh gi√°",
        "T·ª± ch·ªãu tr√°ch nhi·ªám v·ªõi k·∫øt qu·∫£ h·ªçc t·∫≠p"
      ]
    },
    {
      icon: "‚öñÔ∏è",
      title: "T√¥n tr·ªçng li√™m ch√≠nh h·ªçc thu·∫≠t",
      description: "Duy tr√¨ t√≠nh trung th·ª±c, minh b·∫°ch trong qu√° tr√¨nh h·ªçc t·∫≠p v√† nghi√™n c·ª©u, kh√¥ng l·∫°m d·ª•ng AI ƒë·ªÉ gian l·∫≠n ho·∫∑c ƒë·∫°o vƒÉn.",
      examples: [
        "Kh√¥ng n·ªôp b√†i ho√†n to√†n do AI t·∫°o ra",
        "Th√†nh th·∫≠t v·ªÅ vi·ªác s·ª≠ d·ª•ng AI v·ªõi gi·∫£ng vi√™n",
        "T√¥n tr·ªçng quy ƒë·ªãnh c·ªßa tr∆∞·ªùng v·ªÅ vi·ªác d√πng AI",
        "Ph√°t tri·ªÉn k·ªπ nƒÉng t∆∞ duy ƒë·ªôc l·∫≠p"
      ]
    }
  ];

  return (
    <div
      className="relative min-h-screen overflow-hidden bg-[#22170f]"
      style={{ backgroundImage: parchmentTexture, backgroundSize: '220px 220px', backgroundBlendMode: 'multiply' }}
    >
      <div className="pointer-events-none absolute inset-0 bg-[#e6cba1]/12 mix-blend-soft-light"></div>
      <div className="pointer-events-none absolute inset-0 bg-[radial-gradient(circle_at_top,_rgba(188,143,95,0.18),_transparent_70%)]"></div>
      {/* Header */}
      <div className="relative overflow-hidden">
        <div className="pointer-events-none absolute inset-0 bg-[radial-gradient(circle_at_15%_-10%,rgba(200,153,103,0.22),transparent_60%)]"></div>
        <div className="relative z-10 container mx-auto px-6 py-20">
          <motion.button
            onClick={() => navigate('/')}
            initial={{ opacity: 0, x: -50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8 }}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="mb-8 flex items-center space-x-2 font-serif-main text-amber-200/70 transition-colors duration-300 hover:text-amber-100"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            <span className="text-lg">Quay l·∫°i trang ch√≠nh</span>
          </motion.button>

          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="text-center"
          >
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ duration: 10, repeat: Infinity, ease: "linear" }}
              className="mx-auto mb-8 flex h-24 w-24 items-center justify-center rounded-full bg-[#70502d]/85 shadow-[0_26px_42px_rgba(0,0,0,0.45)]"
              style={{ backgroundImage: fiberTexture, backgroundSize: '150px 150px', backgroundBlendMode: 'soft-light' }}
            >
                <svg className="h-12 w-12 text-amber-100" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
            </motion.div>

              <h1 className="mb-6 font-serif-heading text-4xl font-semibold tracking-wide text-amber-200 md:text-6xl">
              Li√™m ch√≠nh h·ªçc thu·∫≠t v·ªõi AI
            </h1>
            
              <p className="mx-auto max-w-3xl font-serif-main text-xl leading-relaxed text-amber-100/80 md:text-2xl">
              H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o m·ªôt c√°ch ƒë√∫ng ƒë·∫Øn v√† c√≥ tr√°ch nhi·ªám trong h·ªçc t·∫≠p
            </p>
          </motion.div>
        </div>
      </div>

      {/* Main Content */}
        <div className="relative z-10 container mx-auto px-6 py-16">
          <div className="mx-auto grid max-w-7xl grid-cols-1 gap-8 lg:grid-cols-2">
          {principles.map((principle, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 50 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: index * 0.2 }}
              whileHover={{ y: -8, scale: 1.02 }}
              className="relative overflow-hidden rounded-[30px] border border-amber-900/40 bg-[#2b1f16]/94 p-8 shadow-[0_26px_42px_rgba(0,0,0,0.45)]"
              style={{ backgroundImage: fiberTexture, backgroundSize: '160px 160px', backgroundBlendMode: 'soft-light' }}
            >
              <div className="pointer-events-none absolute inset-0 opacity-30 mix-blend-soft-light" style={{ backgroundImage: fiberTexture }}></div>
              <div className="relative">
                <div className="text-center mb-6">
                  <div className="text-5xl mb-4">{principle.icon}</div>
                    <h3 className="mb-4 font-serif-heading text-2xl font-semibold tracking-wide text-amber-100 md:text-3xl">
                    {principle.title}
                  </h3>
                </div>

                  <p className="mb-6 font-serif-main text-lg leading-relaxed text-amber-100/85">
                  {principle.description}
                </p>

                <div className="space-y-3">
                    <h4 className="mb-4 font-serif-heading text-lg font-semibold text-amber-300">V√≠ d·ª• th·ª±c h√†nh:</h4>
                  {principle.examples.map((example, exampleIndex) => (
                    <motion.div
                      key={exampleIndex}
                      initial={{ opacity: 0, x: -20 }}
                      whileInView={{ opacity: 1, x: 0 }}
                      transition={{ duration: 0.5, delay: (index * 0.2) + (exampleIndex * 0.1) }}
                        className="flex items-start space-x-3 text-amber-100/84"
                    >
                      <motion.div
                        animate={{ scale: [1, 1.2, 1] }}
                        transition={{ duration: 2, delay: exampleIndex * 0.3, repeat: Infinity }}
                          className="mt-2 h-2 w-2 flex-shrink-0 rounded-full"
                          style={{ backgroundColor: '#d9af66' }}
                      />
                      <span className="text-sm leading-relaxed">{example}</span>
                    </motion.div>
                  ))}
                </div>

                {/* Progress indicator */}
                  <div className="mt-6 border-t border-amber-900/35 pt-6">
                  <div className="flex justify-center">
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 3, repeat: Infinity, ease: "linear" }}
                        className="h-8 w-8 rounded-full border-2 border-amber-800/35 border-t-amber-100"
                    />
                  </div>
                </div>
              </div>
            </motion.div>
          ))}
        </div>

        {/* Best Practices Section */}
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.8 }}
          className="mt-20"
        >
            <div
              className="mx-auto max-w-5xl rounded-[32px] border border-amber-900/35 bg-[#281d15]/88 p-8 shadow-[0_26px_42px_rgba(0,0,0,0.43)] backdrop-blur-[1px] md:p-12"
              style={{ backgroundImage: fiberTexture, backgroundSize: '170px 170px', backgroundBlendMode: 'soft-light' }}
            >
              <h3 className="mb-8 text-center font-serif-heading text-3xl font-semibold tracking-wide text-amber-200 md:text-4xl">
              Nguy√™n t·∫Øc v√†ng khi s·ª≠ d·ª•ng AI
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 text-center">
              {[
                { emoji: "üéØ", text: "M·ª•c ti√™u r√µ r√†ng" },
                { emoji: "üîç", text: "Ki·ªÉm tra th√¥ng tin" },
                { emoji: "üìñ", text: "H·ªçc h·ªèi li√™n t·ª•c" },
                { emoji: "ü§î", text: "T∆∞ duy ph·∫£n bi·ªán" }
              ].map((item, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, scale: 0.8 }}
                  whileInView={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.8, delay: 1 + (index * 0.1) }}
                  whileHover={{ scale: 1.1, y: -5 }}
                    className="rounded-2xl border border-amber-900/35 bg-[#2a1f16]/88 p-6 shadow-[0_16px_26px_rgba(0,0,0,0.35)]"
                    style={{ backgroundImage: fiberTexture, backgroundSize: '160px 160px', backgroundBlendMode: 'soft-light' }}
                >
                  <div className="text-4xl mb-3">{item.emoji}</div>
                    <p className="font-serif-heading text-amber-100 font-semibold">{item.text}</p>
                </motion.div>
              ))}
            </div>

            {/* Final message */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 1.5 }}
                className="mt-8 border-t border-amber-900/35 pt-8 text-center"
            >
                <p className="font-serif-main text-lg leading-relaxed text-amber-100/85 md:text-xl">
                  H√£y nh·ªõ: <span className="font-semibold text-amber-200">AI l√† ƒë·ªëi t√°c</span>, kh√¥ng ph·∫£i l√†
                  <span className="font-semibold text-amber-200/90"> thay th·∫ø</span> cho vi·ªác h·ªçc t·∫≠p c·ªßa b·∫°n.
                  S·ª± k·∫øt h·ª£p th√¥ng minh gi·ªØa <span className="font-semibold text-amber-200/90">c√¥ng ngh·ªá v√† tri th·ª©c con ng∆∞·ªùi</span>
                  s·∫Ω t·∫°o ra nh·ªØng k·∫øt qu·∫£ h·ªçc t·∫≠p tuy·ªát v·ªùi!
              </p>
            </motion.div>
          </div>
        </motion.div>

        {/* Navigation buttons */}
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 1 }}
            className="mt-16 flex justify-center space-x-6"
        >
          <motion.button
            onClick={() => navigate('/')}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
              className="relative overflow-hidden rounded-full border border-amber-900/40 bg-[#2b1f16]/94 px-8 py-4 font-serif-heading text-sm font-semibold tracking-[0.3em] text-amber-100 shadow-[0_22px_36px_rgba(0,0,0,0.4)] transition-all duration-300"
              style={{ backgroundImage: fiberTexture, backgroundSize: '160px 160px', backgroundBlendMode: 'soft-light' }}
          >
            <span className="pointer-events-none absolute inset-0 opacity-25 mix-blend-soft-light" style={{ backgroundImage: fiberTexture }}></span>
            Quay l·∫°i h·ªçc thuy·∫øt
          </motion.button>
          
          <motion.button
            onClick={() => navigate('/quiz')}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
              className="relative overflow-hidden rounded-full border border-amber-900/40 bg-[#2a1e15]/94 px-8 py-4 font-serif-heading text-sm font-semibold tracking-[0.3em] text-amber-100 shadow-[0_22px_36px_rgba(0,0,0,0.4)] transition-all duration-300"
              style={{ backgroundImage: fiberTexture, backgroundSize: '160px 160px', backgroundBlendMode: 'soft-light' }}
          >
            <span className="pointer-events-none absolute inset-0 opacity-25 mix-blend-soft-light" style={{ backgroundImage: fiberTexture }}></span>
            Tham gia Quiz
          </motion.button>
        </motion.div>
      </div>
    </div>
  );
};

export default AiUsagePage;