import { motion, AnimatePresence } from 'framer-motion';
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const QuizPage = () => {
  const navigate = useNavigate();
  
  // Quiz configuration
  const QUIZ_TIME_MINUTES = 15;
  const QUIZ_TIME_SECONDS = QUIZ_TIME_MINUTES * 60;

  // Quiz questions
  const questions = [
    {
      question: "Theo Marx, c√°i g√¨ quy·∫øt ƒë·ªãnh ki·∫øn tr√∫c th∆∞·ª£ng t·∫ßng c·ªßa x√£ h·ªôi?",
      options: [
        "√ù th·ª©c x√£ h·ªôi",
        "C∆° s·ªü h·∫° t·∫ßng kinh t·∫ø",
        "H·ªá th·ªëng ch√≠nh tr·ªã",
        "Truy·ªÅn th·ªëng vƒÉn h√≥a"
      ],
      correct: 1
    },
    {
      question: "L·ª±c l∆∞·ª£ng s·∫£n xu·∫•t bao g·ªìm nh·ªØng y·∫øu t·ªë n√†o?",
      options: [
        "Ch·ªâ c√≥ con ng∆∞·ªùi lao ƒë·ªông",
        "Ch·ªâ c√≥ c√¥ng c·ª• lao ƒë·ªông",
        "Con ng∆∞·ªùi lao ƒë·ªông v√† c√¥ng c·ª• lao ƒë·ªông",
        "Quan h·ªá s·ªü h·ªØu t∆∞ li·ªáu s·∫£n xu·∫•t"
      ],
      correct: 2
    },
    {
      question: "M√¢u thu·∫´n c∆° b·∫£n c·ªßa ch·ªß nghƒ©a t∆∞ b·∫£n l√† g√¨?",
      options: [
        "Gi·ªØa giai c·∫•p t∆∞ s·∫£n v√† giai c·∫•p v√¥ s·∫£n",
        "Gi·ªØa t√≠nh ch·∫•t x√£ h·ªôi c·ªßa s·∫£n xu·∫•t v√† t√≠nh ch·∫•t t∆∞ nh√¢n c·ªßa chi·∫øm h·ªØu",
        "Gi·ªØa cung v√† c·∫ßu tr√™n th·ªã tr∆∞·ªùng",
        "Gi·ªØa lao ƒë·ªông ch√¢n tay v√† lao ƒë·ªông tr√≠ √≥c"
      ],
      correct: 1
    },
    {
      question: "Theo Lenin, ch·ªß nghƒ©a ƒë·∫ø qu·ªëc l√† g√¨?",
      options: [
        "Giai ƒëo·∫°n th·∫•p nh·∫•t c·ªßa ch·ªß nghƒ©a t∆∞ b·∫£n",
        "Giai ƒëo·∫°n cao nh·∫•t v√† cu·ªëi c√πng c·ªßa ch·ªß nghƒ©a t∆∞ b·∫£n",
        "M·ªôt h√¨nh th√°i kinh t·∫ø - x√£ h·ªôi ri√™ng bi·ªát",
        "Ch√≠nh s√°ch ƒë·ªëi ngo·∫°i c·ªßa c√°c n∆∞·ªõc l·ªõn"
      ],
      correct: 1
    },
    {
      question: "ƒê·∫∑c ƒëi·ªÉm n√†o sau ƒë√¢y KH√îNG ph·∫£i c·ªßa x√£ h·ªôi c·ªông s·∫£n nguy√™n th·ªßy?",
      options: [
        "Kh√¥ng c√≥ giai c·∫•p",
        "S·∫£n xu·∫•t t·∫≠p th·ªÉ",
        "C√≥ t∆∞ h·ªØu v·ªÅ t∆∞ li·ªáu s·∫£n xu·∫•t",
        "Ph√¢n ph·ªëi theo lao ƒë·ªông"
      ],
      correct: 2
    },
    {
      question: "Vai tr√≤ c·ªßa nh√† n∆∞·ªõc trong x√£ h·ªôi ch·ªß nghƒ©a l√† g√¨?",
      options: [
        "Bi·∫øn m·∫•t ho√†n to√†n",
        "Ch·ªâ c√≥ ch·ª©c nƒÉng qu·∫£n l√Ω kinh t·∫ø",
        "C√¥ng c·ª• c·ªßa giai c·∫•p c√¥ng nh√¢n ƒë·ªÉ x√¢y d·ª±ng x√£ h·ªôi m·ªõi",
        "Trung l·∫≠p gi·ªØa c√°c giai c·∫•p"
      ],
      correct: 2
    },
    {
      question: "Quy lu·∫≠t gi√° tr·ªã trong kinh t·∫ø th·ªã tr∆∞·ªùng ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?",
      options: [
        "Gi√° c·∫£ ƒë∆∞·ª£c nh√† n∆∞·ªõc quy ƒë·ªãnh",
        "H√†ng h√≥a trao ƒë·ªïi theo lao ƒë·ªông x√£ h·ªôi c·∫ßn thi·∫øt",
        "Gi√° c·∫£ ph·ª• thu·ªôc v√†o √Ω mu·ªën c·ªßa ng∆∞·ªùi b√°n",
        "Kh√¥ng c√≥ quy lu·∫≠t n√†o chi ph·ªëi"
      ],
      correct: 1
    },
    {
      question: "ƒê·∫∑c ƒëi·ªÉm c·ªßa h√¨nh th√°i kinh t·∫ø - x√£ h·ªôi phong ki·∫øn l√† g√¨?",
      options: [
        "Quan h·ªá ch·ªß n√¥ - n√¥ l·ªá",
        "Quan h·ªá l√£nh ch√∫a - n√¥ng n√¥ d·ª±a tr√™n ru·ªông ƒë·∫•t",
        "Quan h·ªá t∆∞ b·∫£n - c√¥ng nh√¢n",
        "Kh√¥ng c√≥ quan h·ªá giai c·∫•p"
      ],
      correct: 1
    },
    {
      question: "Theo Marx, c√°ch m·∫°ng x√£ h·ªôi x·∫£y ra khi n√†o?",
      options: [
        "Khi nh√¢n d√¢n mu·ªën thay ƒë·ªïi",
        "Khi l·ª±c l∆∞·ª£ng s·∫£n xu·∫•t ph√°t tri·ªÉn kh√¥ng ph√π h·ª£p v·ªõi quan h·ªá s·∫£n xu·∫•t c≈©",
        "Khi c√≥ s·ª± can thi·ªáp t·ª´ b√™n ngo√†i",
        "Khi kinh t·∫ø kh·ªßng ho·∫£ng"
      ],
      correct: 1
    },
    {
      question: "√ù nghƒ©a c·ªßa h·ªçc thuy·∫øt Marx-Lenin ƒë·ªëi v·ªõi Vi·ªát Nam hi·ªán nay l√† g√¨?",
      options: [
        "Ch·ªâ c√≥ √Ω nghƒ©a l·ªãch s·ª≠",
        "Ho√†n to√†n l·ªói th·ªùi",
        "C∆° s·ªü l√Ω lu·∫≠n cho vi·ªác x√¢y d·ª±ng ch·ªß nghƒ©a x√£ h·ªôi",
        "Ch·ªâ √°p d·ª•ng trong kinh t·∫ø"
      ],
      correct: 2
    }
  ];

  // State management
  const [timeLeft, setTimeLeft] = useState(QUIZ_TIME_SECONDS);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState({});
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [score, setScore] = useState(0);
  const [studentName, setStudentName] = useState('');
  const [showNameInput, setShowNameInput] = useState(true);
  const [leaderboard, setLeaderboard] = useState([]);
  const [quizStarted, setQuizStarted] = useState(false);

  // Load leaderboard from localStorage
  useEffect(() => {
    const savedLeaderboard = localStorage.getItem('marx-lenin-quiz-leaderboard');
    if (savedLeaderboard) {
      setLeaderboard(JSON.parse(savedLeaderboard));
    }
  }, []);

  // Countdown timer
  useEffect(() => {
    if (quizStarted && !quizCompleted && timeLeft > 0) {
      const timer = setTimeout(() => {
        setTimeLeft(timeLeft - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (timeLeft === 0 && !quizCompleted) {
      handleSubmitQuiz();
    }
  }, [timeLeft, quizCompleted, quizStarted]);

  // Format time display
  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const handleStartQuiz = () => {
    if (studentName.trim()) {
      setShowNameInput(false);
      setQuizStarted(true);
    }
  };

  const handleAnswerSelect = (questionIndex, answerIndex) => {
    setAnswers({
      ...answers,
      [questionIndex]: answerIndex
    });
  };

  const handleSubmitQuiz = () => {
    // Calculate score
    let correctAnswers = 0;
    questions.forEach((question, index) => {
      if (answers[index] === question.correct) {
        correctAnswers++;
      }
    });

    const finalScore = correctAnswers;
    setScore(finalScore);
    setQuizCompleted(true);

    // Save to leaderboard
    const newEntry = {
      name: studentName,
      score: finalScore,
      totalQuestions: questions.length,
      timestamp: new Date().toISOString()
    };

    const updatedLeaderboard = [...leaderboard, newEntry]
      .sort((a, b) => b.score - a.score)
      .slice(0, 20); // Keep only top 20

    setLeaderboard(updatedLeaderboard);
    localStorage.setItem('marx-lenin-quiz-leaderboard', JSON.stringify(updatedLeaderboard));
  };

  const getScoreColor = (score, total) => {
    const percentage = (score / total) * 100;
    if (percentage >= 80) return 'text-green-400';
    if (percentage >= 60) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getScoreGrade = (score, total) => {
    const percentage = (score / total) * 100;
    if (percentage >= 90) return 'Xu·∫•t s·∫Øc';
    if (percentage >= 80) return 'Gi·ªèi';
    if (percentage >= 70) return 'Kh√°';
    if (percentage >= 60) return 'Trung b√¨nh';
    return 'Y·∫øu';
  };

  // Name input screen
  if (showNameInput) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-800 to-pink-900 flex items-center justify-center p-6">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.8 }}
          className="bg-white/10 backdrop-blur-md rounded-2xl p-8 md:p-12 max-w-md w-full border border-white/20 shadow-2xl"
        >
          <motion.button
            onClick={() => navigate('/')}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.3 }}
            className="mb-6 flex items-center space-x-2 text-white/80 hover:text-white transition-colors"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            <span>Quay l·∫°i</span>
          </motion.button>

          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.2 }}
            className="text-center mb-8"
          >
            <div className="text-6xl mb-4">üìù</div>
            <h1 className="text-3xl font-bold text-white mb-4">
              Quiz H·ªçc thuy·∫øt Marx-Lenin
            </h1>
            <p className="text-gray-300">
              Th·ªùi gian: <span className="text-yellow-400 font-semibold">{QUIZ_TIME_MINUTES} ph√∫t</span>
              <br />
              S·ªë c√¢u h·ªèi: <span className="text-cyan-400 font-semibold">{questions.length} c√¢u</span>
            </p>
          </motion.div>

          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.4 }}
          >
            <label className="block text-white font-semibold mb-2">
              Nh·∫≠p h·ªç t√™n c·ªßa b·∫°n:
            </label>
            <input
              type="text"
              value={studentName}
              onChange={(e) => setStudentName(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleStartQuiz()}
              placeholder="V√≠ d·ª•: Nguy·ªÖn VƒÉn A"
              className="w-full p-4 rounded-xl bg-white/20 border border-white/30 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:border-transparent transition-all"
            />
          </motion.div>

          <motion.button
            onClick={handleStartQuiz}
            disabled={!studentName.trim()}
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.6 }}
            whileHover={{ scale: studentName.trim() ? 1.05 : 1 }}
            whileTap={{ scale: studentName.trim() ? 0.95 : 1 }}
            className={`w-full mt-6 py-4 rounded-xl font-bold text-lg transition-all duration-300 ${
              studentName.trim()
                ? 'bg-gradient-to-r from-green-600 to-teal-600 hover:from-green-500 hover:to-teal-500 text-white shadow-lg'
                : 'bg-gray-600 text-gray-400 cursor-not-allowed'
            }`}
          >
            B·∫Øt ƒë·∫ßu l√†m b√†i
          </motion.button>
        </motion.div>
      </div>
    );
  }

  // Quiz completed screen
  if (quizCompleted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-gray-800 to-slate-900 p-6">
        <div className="container mx-auto max-w-6xl">
          <motion.button
            onClick={() => navigate('/')}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            className="mb-6 flex items-center space-x-2 text-white/80 hover:text-white transition-colors"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            <span>Quay l·∫°i trang ch√≠nh</span>
          </motion.button>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Personal Score */}
            <motion.div
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
              className="bg-white/10 backdrop-blur-md rounded-2xl p-8 border border-white/20"
            >
              <h2 className="text-3xl font-bold text-white mb-6 text-center">
                K·∫øt qu·∫£ c·ªßa b·∫°n
              </h2>
              
              <div className="text-center mb-8">
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ delay: 0.3, type: "spring" }}
                  className={`text-6xl font-bold mb-4 ${getScoreColor(score, questions.length)}`}
                >
                  {score}/{questions.length}
                </motion.div>
                <div className="text-2xl text-white mb-2">
                  {studentName}
                </div>
                <div className={`text-xl font-semibold ${getScoreColor(score, questions.length)}`}>
                  {getScoreGrade(score, questions.length)}
                </div>
                <div className="text-gray-400 mt-2">
                  T·ªâ l·ªá ƒë√∫ng: {Math.round((score / questions.length) * 100)}%
                </div>
              </div>

              {/* Review answers */}
              <div className="space-y-4 max-h-96 overflow-y-auto">
                <h3 className="text-xl font-semibold text-white mb-4">Xem l·∫°i ƒë√°p √°n:</h3>
                {questions.map((question, index) => (
                  <div key={index} className="bg-white/5 rounded-lg p-4 border border-white/10">
                    <p className="text-white text-sm mb-2">
                      <span className="font-semibold">C√¢u {index + 1}:</span> {question.question}
                    </p>
                    <div className="text-sm">
                      <div className={`${answers[index] === question.correct ? 'text-green-400' : 'text-red-400'}`}>
                        B·∫°n ch·ªçn: {question.options[answers[index]] || 'Kh√¥ng tr·∫£ l·ªùi'}
                      </div>
                      {answers[index] !== question.correct && (
                        <div className="text-green-400">
                          ƒê√°p √°n ƒë√∫ng: {question.options[question.correct]}
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </motion.div>

            {/* Leaderboard */}
            <motion.div
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.2 }}
              className="bg-white/10 backdrop-blur-md rounded-2xl p-8 border border-white/20"
            >
              <h2 className="text-3xl font-bold text-white mb-6 text-center">
                B·∫£ng x·∫øp h·∫°ng
              </h2>

              <div className="space-y-3 max-h-96 overflow-y-auto">
                {leaderboard.length === 0 ? (
                  <p className="text-gray-400 text-center">Ch∆∞a c√≥ d·ªØ li·ªáu</p>
                ) : (
                  leaderboard.map((entry, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, x: 50 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: 0.1 * index }}
                      className={`flex items-center justify-between p-4 rounded-lg ${
                        entry.name === studentName 
                          ? 'bg-gradient-to-r from-blue-600/30 to-purple-600/30 border-2 border-blue-400' 
                          : 'bg-white/5 border border-white/10'
                      }`}
                    >
                      <div className="flex items-center space-x-4">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold ${
                          index === 0 ? 'bg-yellow-500 text-black' :
                          index === 1 ? 'bg-gray-400 text-black' :
                          index === 2 ? 'bg-orange-600 text-white' :
                          'bg-white/20 text-white'
                        }`}>
                          {index + 1}
                        </div>
                        <div>
                          <div className="text-white font-semibold">
                            {entry.name}
                            {entry.name === studentName && (
                              <span className="text-cyan-400 ml-2">(B·∫°n)</span>
                            )}
                          </div>
                          <div className="text-gray-400 text-sm">
                            {new Date(entry.timestamp).toLocaleDateString('vi-VN')}
                          </div>
                        </div>
                      </div>
                      <div className={`text-xl font-bold ${getScoreColor(entry.score, entry.totalQuestions)}`}>
                        {entry.score}/{entry.totalQuestions}
                      </div>
                    </motion.div>
                  ))
                )}
              </div>
            </motion.div>
          </div>
        </div>
      </div>
    );
  }

  // Quiz in progress
  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-blue-800 to-purple-900 p-6">
      <div className="container mx-auto max-w-4xl">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <motion.button
            onClick={() => navigate('/')}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            className="flex items-center space-x-2 text-white/80 hover:text-white transition-colors"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            <span>Tho√°t</span>
          </motion.button>

          {/* Timer */}
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className={`bg-white/20 backdrop-blur-md rounded-xl px-6 py-3 border ${
              timeLeft < 300 ? 'border-red-400 text-red-400' : 'border-white/30 text-white'
            }`}
          >
            <div className="flex items-center space-x-2">
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span className="font-bold text-xl">{formatTime(timeLeft)}</span>
            </div>
          </motion.div>
        </div>

        {/* Progress */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <div className="flex justify-between text-white mb-2">
            <span>C√¢u {currentQuestion + 1} / {questions.length}</span>
            <span>{studentName}</span>
          </div>
          <div className="w-full bg-white/20 rounded-full h-2">
            <motion.div
              className="bg-gradient-to-r from-cyan-400 to-blue-500 h-2 rounded-full"
              initial={{ width: 0 }}
              animate={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
              transition={{ duration: 0.3 }}
            />
          </div>
        </motion.div>

        {/* Question */}
        <AnimatePresence mode="wait">
          <motion.div
            key={currentQuestion}
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -50 }}
            transition={{ duration: 0.3 }}
            className="bg-white/10 backdrop-blur-md rounded-2xl p-8 mb-8 border border-white/20"
          >
            <h2 className="text-2xl md:text-3xl font-bold text-white mb-8">
              {questions[currentQuestion].question}
            </h2>

            <div className="space-y-4">
              {questions[currentQuestion].options.map((option, index) => (
                <motion.button
                  key={index}
                  onClick={() => handleAnswerSelect(currentQuestion, index)}
                  whileHover={{ scale: 1.02, x: 10 }}
                  whileTap={{ scale: 0.98 }}
                  className={`w-full text-left p-4 rounded-xl border-2 transition-all duration-300 ${
                    answers[currentQuestion] === index
                      ? 'bg-gradient-to-r from-cyan-600/50 to-blue-600/50 border-cyan-400 text-white shadow-lg'
                      : 'bg-white/5 border-white/20 text-gray-300 hover:border-white/40 hover:bg-white/10'
                  }`}
                >
                  <div className="flex items-center space-x-4">
                    <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center text-sm font-bold ${
                      answers[currentQuestion] === index
                        ? 'border-cyan-400 bg-cyan-400 text-white'
                        : 'border-gray-400'
                    }`}>
                      {String.fromCharCode(65 + index)}
                    </div>
                    <span className="text-lg">{option}</span>
                  </div>
                </motion.button>
              ))}
            </div>
          </motion.div>
        </AnimatePresence>

        {/* Navigation */}
        <div className="flex justify-between">
          <motion.button
            onClick={() => setCurrentQuestion(Math.max(0, currentQuestion - 1))}
            disabled={currentQuestion === 0}
            whileHover={{ scale: currentQuestion > 0 ? 1.05 : 1 }}
            whileTap={{ scale: currentQuestion > 0 ? 0.95 : 1 }}
            className={`px-6 py-3 rounded-xl font-bold transition-all duration-300 ${
              currentQuestion === 0
                ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                : 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 text-white shadow-lg'
            }`}
          >
            C√¢u tr∆∞·ªõc
          </motion.button>

          {currentQuestion === questions.length - 1 ? (
            <motion.button
              onClick={handleSubmitQuiz}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="bg-gradient-to-r from-green-600 to-teal-600 hover:from-green-500 hover:to-teal-500 text-white font-bold px-8 py-3 rounded-xl shadow-lg transition-all duration-300"
            >
              N·ªôp b√†i
            </motion.button>
          ) : (
            <motion.button
              onClick={() => setCurrentQuestion(Math.min(questions.length - 1, currentQuestion + 1))}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 text-white font-bold px-6 py-3 rounded-xl shadow-lg transition-all duration-300"
            >
              C√¢u ti·∫øp
            </motion.button>
          )}
        </div>

        {/* Question navigation dots */}
        <div className="flex justify-center mt-8 space-x-2">
          {questions.map((_, index) => (
            <motion.button
              key={index}
              onClick={() => setCurrentQuestion(index)}
              whileHover={{ scale: 1.2 }}
              whileTap={{ scale: 0.9 }}
              className={`w-3 h-3 rounded-full transition-all duration-300 ${
                index === currentQuestion
                  ? 'bg-cyan-400 scale-125'
                  : answers[index] !== undefined
                  ? 'bg-green-400'
                  : 'bg-white/30 hover:bg-white/50'
              }`}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

export default QuizPage;