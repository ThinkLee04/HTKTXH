import React, { useState, useEffect } from 'react';
import { doc, setDoc, updateDoc, onSnapshot, serverTimestamp, getDoc } from 'firebase/firestore';
import { db } from '../firebase';

/**
 * Component qu·∫£n tr·ªã cho room-based quiz system
 * @param {string} sessionId - ID c·ªßa room quiz (t∆∞∆°ng ƒë∆∞∆°ng roomId)
 */
const AdminPanel = ({ sessionId }) => {
  const [room, setRoom] = useState(null);
  const [session, setSession] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [isStarting, setIsStarting] = useState(false);
  const [isProgressing, setIsProgressing] = useState(false);
  const [showNameInput, setShowNameInput] = useState(false); // Kh√¥ng hi·ªÉn th·ªã name input n·ªØa
  const [timeLeft, setTimeLeft] = useState(0); // Timer countdown
  const [canProceed, setCanProceed] = useState(false); // Can proceed to next question

  // Listen to room changes
  useEffect(() => {
    const unsubscribe = onSnapshot(doc(db, 'quiz-rooms', sessionId), (doc) => {
      if (doc.exists()) {
        setRoom(doc.data());
      }
    });

    return () => unsubscribe();
  }, [sessionId]);

  // Listen to session changes (quiz data)
  useEffect(() => {
    const unsubscribe = onSnapshot(doc(db, 'sessions', sessionId), (doc) => {
      if (doc.exists()) {
        const sessionData = doc.data();
        setSession(sessionData);
        
        // Start countdown when new question starts
        if (sessionData && sessionData.questionStartTime && !sessionData.isFinished) {
          setTimeLeft(25); // Start 25s countdown
          setCanProceed(false);
        }
      }
    });

    return () => unsubscribe();
  }, [sessionId]);

  // Countdown timer effect
  useEffect(() => {
    if (session && session.questionStartTime && !session.isFinished && timeLeft > 0) {
      const timer = setInterval(() => {
        setTimeLeft(prev => {
          const newTime = prev - 1;
          if (newTime <= 0) {
            setCanProceed(true); // Enable proceed button
          }
          return Math.max(0, newTime);
        });
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [session, timeLeft]);

  // Load questions from Firestore
  useEffect(() => {
    const loadQuestions = async () => {
      try {
        const questionsDoc = await getDoc(doc(db, 'quiz-data', 'questions'));
        if (questionsDoc.exists()) {
          setQuestions(questionsDoc.data().questions || []);
        } else {
          // Fallback to sample questions if not found
          console.warn('Questions not found in Firestore, using sample questions');
          setQuestions(sampleQuestions);
        }
      } catch (error) {
        console.error('Error loading questions:', error);
        setQuestions(sampleQuestions); // Fallback
      }
    };

    // Sample questions as fallback
    const sampleQuestions = [
      {
        id: 1,
        question: "Theo Marx, giai c·∫•p n√†o l√† l·ª±c l∆∞·ª£ng c√°ch m·∫°ng ch·ªß y·∫øu trong x√£ h·ªôi t∆∞ b·∫£n?",
        options: ["Giai c·∫•p n√¥ng d√¢n", "Giai c·∫•p c√¥ng nh√¢n", "Giai c·∫•p tr√≠ th·ª©c", "Ti·ªÉu t∆∞ s·∫£n"],
        correctAnswer: "Giai c·∫•p c√¥ng nh√¢n",
        explanation: "Marx cho r·∫±ng giai c·∫•p c√¥ng nh√¢n l√† l·ª±c l∆∞·ª£ng c√°ch m·∫°ng ch·ªß y·∫øu v√¨ h·ªç kh√¥ng c√≥ t∆∞ li·ªáu s·∫£n xu·∫•t v√† b·ªã b√≥c l·ªôt b·ªüi giai c·∫•p t∆∞ b·∫£n."
      },
      {
        id: 2,
        question: "Gi√° tr·ªã th·∫∑ng d∆∞ l√† g√¨ trong l√Ω thuy·∫øt kinh t·∫ø Marx?",
        options: ["L·ª£i nhu·∫≠n c·ªßa nh√† t∆∞ b·∫£n", "Gi√° tr·ªã do c√¥ng nh√¢n t·∫°o ra nh∆∞ng kh√¥ng ƒë∆∞·ª£c tr·∫£ c√¥ng", "Thu·∫ø m√† nh√† n∆∞·ªõc thu", "Chi ph√≠ s·∫£n xu·∫•t"],
        correctAnswer: "Gi√° tr·ªã do c√¥ng nh√¢n t·∫°o ra nh∆∞ng kh√¥ng ƒë∆∞·ª£c tr·∫£ c√¥ng",
        explanation: "Gi√° tr·ªã th·∫∑ng d∆∞ l√† ph·∫ßn gi√° tr·ªã do c√¥ng nh√¢n t·∫°o ra v∆∞·ª£t qu√° gi√° tr·ªã s·ª©c lao ƒë·ªông c·ªßa h·ªç, ƒë∆∞·ª£c nh√† t∆∞ b·∫£n chi·∫øm ƒëo·∫°t."
      }
    ];

    loadQuestions();
  }, []);

  const handleAdminJoin = (e) => {
    e.preventDefault();
    if (adminName.trim()) {
      setShowNameInput(false);
    }
  };

  const startQuiz = async () => {
    if (!session) {
      setIsStarting(true);
      try {
        console.log('Starting quiz with roomId:', sessionId);
        console.log('Questions available:', questions.length);
        
        // T·∫°o session m·ªõi v·ªõi th√¥ng tin room
        const today = new Date().toISOString().split('T')[0];
        await setDoc(doc(db, 'sessions', sessionId), {
          currentQuestionIndex: 0,
          questionStartTime: serverTimestamp(),
          isFinished: false,
          totalQuestions: questions.length,
          createdBy: 'Admin',
          createdAt: serverTimestamp(),
          date: today, // Th√™m field date ƒë·ªÉ query
          roomId: sessionId // Link back to room
        });

        // Update room status
        await updateDoc(doc(db, 'quiz-rooms', sessionId), {
          status: 'active',
          startedAt: serverTimestamp()
        });

        console.log('‚úÖ Quiz started successfully!');
      } catch (error) {
        console.error('‚ùå Error starting quiz:', error);
      } finally {
        setIsStarting(false);
      }
    } else {
      console.log('Quiz already started');
    }
  };

  const nextQuestion = async () => {
    if (!session) return;

    setIsProgressing(true);
    try {
      const nextIndex = session.currentQuestionIndex + 1;
      
      if (nextIndex >= questions.length) {
        // K·∫øt th√∫c quiz
        await updateDoc(doc(db, 'sessions', sessionId), {
          isFinished: true,
          finishedAt: serverTimestamp()
        });

        // Update room status
        await updateDoc(doc(db, 'quiz-rooms', sessionId), {
          status: 'finished',
          finishedAt: serverTimestamp()
        });

        console.log('Quiz finished!');
      } else {
        // Chuy·ªÉn c√¢u h·ªèi ti·∫øp theo
        await updateDoc(doc(db, 'sessions', sessionId), {
          currentQuestionIndex: nextIndex,
          questionStartTime: serverTimestamp()
        });
        console.log('Next question:', nextIndex);
      }
    } catch (error) {
      console.error('Error progressing quiz:', error);
    } finally {
      setIsProgressing(false);
    }
  };

  const resetQuiz = async () => {
    try {
      await updateDoc(doc(db, 'sessions', sessionId), {
        currentQuestionIndex: 0,
        questionStartTime: serverTimestamp(),
        isFinished: false
      });

      // Reset room status
      await updateDoc(doc(db, 'quiz-rooms', sessionId), {
        status: 'waiting'
      });

      console.log('Quiz reset!');
    } catch (error) {
      console.error('Error resetting quiz:', error);
    }
  };

  return (
    <div className="max-w-4xl mx-auto mt-10 p-6 bg-white rounded-lg shadow-lg">
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800 mb-2">
          üéØ Quiz Control Panel
        </h2>
        <p className="text-gray-600">Room ID: {sessionId}</p>
      </div>

      {/* Room v√† tr·∫°ng th√°i hi·ªán t·∫°i */}
      <div className="bg-gray-50 p-4 rounded-lg mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <h3 className="font-semibold mb-2">üè† Room Info:</h3>
            <div className="text-sm space-y-1">
              <div><strong>Name:</strong> {room?.name || 'Loading...'}</div>
              <div><strong>Players:</strong> {room?.currentPlayers || 0}/{room?.maxPlayers || 0}</div>
              <div><strong>Status:</strong> 
                <span className={`ml-1 px-2 py-1 rounded text-xs font-medium ${
                  room?.status === 'waiting' ? 'bg-yellow-100 text-yellow-800' :
                  room?.status === 'active' ? 'bg-green-100 text-green-800' :
                  'bg-gray-100 text-gray-800'
                }`}>
                  {room?.status?.toUpperCase()}
                </span>
              </div>
            </div>
          </div>
          <div>
            <h3 className="font-semibold mb-2">üéØ Quiz Status:</h3>
            {!session ? (
              <div className="text-orange-600">‚è≥ Ch∆∞a b·∫Øt ƒë·∫ßu - S·∫µn s√†ng ƒë·ªÉ kh·ªüi ƒë·ªông</div>
            ) : session.isFinished ? (
              <div className="text-green-600">‚úÖ Quiz ƒë√£ ho√†n th√†nh</div>
            ) : (
              <div className="space-y-2">
                <div className="text-blue-600">
                  üîÑ ƒêang di·ªÖn ra - C√¢u {session.currentQuestionIndex + 1}/{questions.length}
                </div>
                {/* Timer Display */}
                <div className="flex items-center gap-3">
                  <div className={`text-2xl font-bold ${
                    timeLeft > 10 ? 'text-green-600' : 
                    timeLeft > 5 ? 'text-yellow-600' : 'text-red-600'
                  }`}>
                    ‚è±Ô∏è {timeLeft}s
                  </div>
                  <div className="flex-1">
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className={`h-2 rounded-full transition-all duration-1000 ${
                          timeLeft > 10 ? 'bg-green-500' : 
                          timeLeft > 5 ? 'bg-yellow-500' : 'bg-red-500'
                        }`}
                        style={{ width: `${(timeLeft / 25) * 100}%` }}
                      />
                    </div>
                  </div>
                </div>
                <div className="text-xs text-gray-600">
                  {canProceed ? 
                    '‚úÖ C√≥ th·ªÉ chuy·ªÉn c√¢u ti·∫øp theo' : 
                    '‚è≥ ƒê·ª£i h·∫øt 25 gi√¢y ƒë·ªÉ c√≥ th·ªÉ chuy·ªÉn c√¢u'
                  }
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* C√¢u h·ªèi hi·ªán t·∫°i */}
      {session && !session.isFinished && (
        <div className="bg-blue-50 p-4 rounded-lg mb-6 border border-blue-200">
          <h3 className="font-semibold text-blue-800 mb-2">
            C√¢u {session.currentQuestionIndex + 1}: 
          </h3>
          <p className="text-blue-700 mb-4 text-lg">
            {questions[session.currentQuestionIndex]?.question}
          </p>
          
          {/* Hi·ªÉn th·ªã c√°c options */}
          <div className="mb-4 space-y-2">
            <h4 className="font-medium text-blue-800">C√°c l·ª±a ch·ªçn:</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
              {questions[session.currentQuestionIndex]?.options?.map((option, index) => (
                <div 
                  key={index} 
                  className={`p-2 rounded border ${
                    timeLeft <= 5 && option === questions[session.currentQuestionIndex]?.correctAnswer
                      ? 'bg-green-100 border-green-400 text-green-800 font-semibold'
                      : 'bg-white border-gray-200 text-gray-700'
                  }`}
                >
                  {String.fromCharCode(65 + index)}. {option}
                </div>
              ))}
            </div>
          </div>

          {/* Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng ch·ªâ khi timeLeft <= 5 */}
          {timeLeft <= 5 && (
            <div className="text-sm bg-green-50 p-3 rounded border border-green-200">
              <strong className="text-green-700">üéØ ƒê√°p √°n ƒë√∫ng:</strong>
              <span className="ml-2 text-green-600 font-semibold">
                {questions[session.currentQuestionIndex]?.correctAnswer}
              </span>
              {questions[session.currentQuestionIndex]?.explanation && (
                <div className="mt-2 text-green-600 text-xs">
                  <strong>Gi·∫£i th√≠ch:</strong> {questions[session.currentQuestionIndex]?.explanation}
                </div>
              )}
            </div>
          )}
        </div>
      )}

      {/* N√∫t ƒëi·ªÅu khi·ªÉn */}
      <div className="space-y-4">
        {!session ? (
          <button
            onClick={startQuiz}
            disabled={isStarting || questions.length === 0}
            className="w-full py-3 px-4 bg-green-600 text-white font-medium text-lg rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {isStarting ? 'üîÑ ƒêang kh·ªüi ƒë·ªông...' : 'üöÄ B·∫Øt ƒë·∫ßu Quiz'}
          </button>
        ) : session.isFinished ? (
          <button
            onClick={resetQuiz}
            className="w-full py-3 px-4 bg-blue-600 text-white font-medium text-lg rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
          >
            üîÑ Kh·ªüi ƒë·ªông l·∫°i Quiz
          </button>
        ) : (
          <button
            onClick={nextQuestion}
            disabled={isProgressing || !canProceed}
            className="w-full py-3 px-4 bg-orange-600 text-white font-medium text-lg rounded-lg hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {isProgressing ? 'üîÑ ƒêang chuy·ªÉn...' : 
             !canProceed ? `‚è≥ ƒê·ª£i ${timeLeft}s` :
             (session.currentQuestionIndex >= questions.length - 1 ? 'üèÅ K·∫øt th√∫c Quiz' : '‚û°Ô∏è C√¢u ti·∫øp theo')}
          </button>
        )}
      </div>

      {/* Th√¥ng tin quiz */}
      <div className="mt-6 text-sm text-gray-600 bg-gray-50 p-4 rounded-lg">
        <h4 className="font-semibold mb-2">üìã Th√¥ng tin Quiz:</h4>
        <ul className="space-y-1">
          <li>‚Ä¢ T·ªïng s·ªë c√¢u h·ªèi: {questions.length}</li>
          <li>‚Ä¢ Th·ªùi gian m·ªói c√¢u: 20 gi√¢y cho ng∆∞·ªùi ch∆°i</li>
          <li>‚Ä¢ Admin timer: 25 gi√¢y tr∆∞·ªõc khi c√≥ th·ªÉ chuy·ªÉn c√¢u</li>
          <li>‚Ä¢ H·ªá th·ªëng t√≠nh ƒëi·ªÉm: CƒÉn c·ª© v√†o th·ªùi gian tr·∫£ l·ªùi</li>
          <li>‚Ä¢ Session ID: {sessionId}</li>
        </ul>
      </div>
    </div>
  );
};

export default AdminPanel;